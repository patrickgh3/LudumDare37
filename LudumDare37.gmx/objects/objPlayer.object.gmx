<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerFront</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>walkSpeed = 2
width = 24
height = 24
halfWidth = width/2
halfHeight = height/2

numSeedsPerRound = 4
numSeeds = numSeedsPerRound

ableToCancel = false
cancellable = false // new variable

tileX = 0
tileY = 0
tileXWorld = 0
tileYWorld = 0
uiAnimT = 0

image_speed = 0
CanDisplay = 0

stepT = 0

frozen = false
endMoveToPoint = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// open door
with objGreenhouseTop image_index = 1
audio_play_sound(sndDig, 0, false)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create credits

instance_create(0, 0, objCredits)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create walk player
visible = false
instance_create(x, y-12, objEndPlayerWalk)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// movement

global.guiAnimT += 1

var xLast = x
var yLast = y

var left = keyboard_check(vk_left)
var right = keyboard_check(vk_right)
var up = keyboard_check(vk_up)
var down = keyboard_check(vk_down)
if frozen {
    left = false
    right = false
    up = false
    down = false
}

if left {
    x -= walkSpeed
}
else if right {
    x += walkSpeed
}

if up {
    y -= walkSpeed
}
else if down {
    y += walkSpeed
}

if not frozen {

if y &lt; yLast {
    sprite_index = sprPlayerBack
}
else if y &gt; yLast {
    sprite_index = sprPlayerFront
}
else if x &lt; xLast {
    sprite_index = sprPlayerLeft
}
else if x &gt; xLast {
    sprite_index = sprPlayerRight
}

}

// out of bounds push back in
while x - halfWidth &lt; objHouse.bbox_left {
    x += 1
}

while x + halfWidth - 1 &gt; objHouse.bbox_right {
    x -= 1
}

while y - halfHeight &lt; objHouse.bbox_top {
    y += 1
}

while y + halfHeight - 1 &gt; objHouse.bbox_bottom {
    y -= 1
}

if stepT &gt; 0 stepT -= 1

if not frozen {
if x != xLast or y != yLast {
    // coming out of standstill
    if image_speed == 0 {
        image_index = 1
    }
    image_speed = 1/10
    
    if stepT == 0 {
        var s = audio_play_sound(sndStep1, 0, false)
        audio_sound_pitch(s, random_range(0.85, 1.15))
        stepT = irandom_range(20, 27)
    }
}
else {
    image_speed = 0
    image_index = 0
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// place seeds and stuff

ableToCancel = false
cancellable = false
justCancelled = false

// Calculate the player's actual tile
var invTileSize = 1/global.tileSize
tileX = floor((x-objHouse.x)*invTileSize)
tileY = floor((y-objHouse.y)*invTileSize)
scrPlayerUpdatePlaceable()

// if not placeable, search around to see if there's a nearby place that is
// (check 8 points in a square around us
/*if not placeable {
    // cardinals first
    var off = 8
    for (var xo=-1; xo&lt;=1; xo+=1) {
        for (var yo=-1; yo&lt;=1; yo+=1) {
            if abs(xo) == abs(yo) continue
            tileX = floor((x+xo*off-objHouse.x)*invTileSize)
            tileY = floor((y+yo*off-objHouse.y)*invTileSize)
            scrPlayerUpdatePlaceable()
            if placeable break
        }
        if placeable break
    }
    // diagonals second
    if not placeable {
    for (var xo=-1; xo&lt;=1; xo+=1) {
        for (var yo=-1; yo&lt;=1; yo+=1) {
            if abs(xo) != abs(yo) continue
            var off = 10
            tileX = floor((x+xo*off-objHouse.x)*invTileSize)
            tileY = floor((y+yo*off-objHouse.y)*invTileSize)
            scrPlayerUpdatePlaceable()
            if placeable break
        }
        if placeable break
    }
    }
    // we weren't able to find an additional spot, so go back to original
    if not placeable {
        tileX = floor((x-objHouse.x)*invTileSize)
        tileY = floor((y-objHouse.y)*invTileSize)
        scrPlayerUpdatePlaceable()
    }
}*/

tileXWorld = objHouse.x + tileX*global.tileSize
tileYWorld = objHouse.y + tileY*global.tileSize

// state actions
if objPlanter.state == PlantState_Destroy {
    placeable = false
}

if objPlanter.state == PlantState_Plant {
    // Plant vine
    if placeable and keyboard_check_pressed(ord('Z')) {
        var vb = instance_create(tileXWorld+16, tileYWorld+16, objVineBase)
        objPlanter.objectGrid[# tileX, tileY] = vb
        audio_play_sound(sndPlop, 0, false)
        global.seedsInventory -= 1
        if global.seedsInventory &gt; 0 {
            // stay in plant state
        }
        else {
            objPlanter.state = PlantState_Choose
            scrPlayerUpdatePlaceable()
        }
    }
}
else if objPlanter.state == PlantState_Choose {
    // Choose vine
    if placeable and keyboard_check_pressed(ord('Z')) {
        // Create first seed
        objPlanter.state = PlantState_Draw
        ds_list_add(objPlanter.pathListX, vineChoice.tileX)
        ds_list_add(objPlanter.pathListY, vineChoice.tileY)
        
        // Create cancel object
        /*var cancelTileX = 4
        var cancelTileY = 4
        var xx = x-objHouse.x
        var yy = y-objHouse.y
        var size = objPlanter.h*global.tileSize
        var topleft = yy &lt; -xx + size
        var botleft = yy &gt; xx
        var offset = 2
        if topleft and botleft {
            cancelTileX +=offset
        }
        else if not topleft and not botleft {
            cancelTileX -= offset
        }
        else if topleft and not botleft {
            cancelTileY += offset
        }
        else if not topleft and botleft {
            cancelTileY -= offset
        }
        var cancel = instance_create(objHouse.x+global.tileSize*cancelTileX,
        objHouse.y+global.tileSize*cancelTileY, objCancelDraw)
        
        objPlanter.objectGrid[# cancelTileX, cancelTileY] = cancel*/
    }
}

if objPlanter.state == PlantState_Draw {
    cancellable = true
    // Extend the path
    if placeable and keyboard_check_pressed(ord('Z')) {
        var s = instance_create(tileXWorld+16, tileYWorld+16, objSeed)
        objPlanter.objectGrid[# tileX, tileY] = s
        
        ds_list_add(objPlanter.pathListX, tileX)
        ds_list_add(objPlanter.pathListY, tileY)
        
        numSeeds -= 1
        CanDisplay = 1
        
        audio_play_sound(sndWatering, 0, false)
        
        if numSeeds == 0 {
            scrGrowVine()
            audio_play_sound(sndGrow, 0, false)
            global.tutorialZ = 1
        }
    }
    
    // Press X to cancel
    if cancellable and keyboard_check_pressed(ord('X')) {
        scrClearPath()
        audio_play_sound(sndCancelBoop, 0, false)
        scrPlayerUpdatePlaceable()
        cancellable = false
        justCancelled = true
    }
    
    // Check if on top of cancel object
    /*var objAtTile = objPlanter.objectGrid[# tileX, tileY]
    if instance_exists(objAtTile) and objAtTile.object_index == objCancelDraw {
        ableToCancel = true
        objCancelDraw.image_index = 1
        if keyboard_check_pressed(ord('Z')) {
            scrClearPath()
            audio_play_sound(sndCancelBoop, 0, false)
        }
    }
    else with objCancelDraw image_index = 0*/
}

uiAnimT += 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy vines

var goDestroy = false
var setADestroyVisible = false

if not frozen {

var foundCloseVine = false
if not justCancelled {
    with objVineBase {
        if not destroying
        and point_distance(x, y, objPlayer.x, objPlayer.y) &lt; 50
        //and ds_list_size(segmentList) &gt; 1
        and (objPlanter.state == PlantState_Choose or objPlanter.state == PlantState_Plant)
        and instance_exists(bulbObj)
        //and (not global.tutorialDisableSpikes or doneGrowing)
        and not setADestroyVisible
        and not bulbObj.growing {
            destroyVisible = true
            setADestroyVisible = true
            if /*not foundCloseVine and */keyboard_check_pressed(ord('X')) {
                goDestroy = true
                /*
                */
            }
            //foundCloseVine = true
        }
        else {
            destroyVisible = false
        }
    }
}

if goDestroy {
    var closestVine = instance_nearest(x, y, objVineBase)
    with closestVine {
        destroying = true
        if objPlanter.state != PlantState_Plant {
            objPlanter.state = PlantState_Destroy
        }
        global.seedsInventory += 1
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// end move to point
if endMoveToPoint {
    sprite_index = sprPlayerBack
    image_speed = 0.1
    dir = point_direction(x, y, objEndPlayerPoint.x, objEndPlayerPoint.y)
    var spd = 1;
    
    x += lengthdir_x(spd, dir)
    y += lengthdir_y(spd, dir)
    
    if point_distance(x, y, objEndPlayerPoint.x, objEndPlayerPoint.y) &lt; 5 {
        x = objEndPlayerPoint.x
        y = objEndPlayerPoint.y
        endMoveToPoint = false
        alarm[2] = 60*2
        alarm[0] = 60*3.5
        alarm[1] = 60*7
        image_speed = 0
        image_index = 0
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objKeyFly">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(sndPlop, 0, false)
with other instance_destroy()
endMoveToPoint = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objStartSeedbag">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with other instance_destroy()
audio_play_sound(sndPlop, 0, false)
global.seedsInventory += 1
objPlanter.state = PlantState_Plant
global.tutorialArrowKeys = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSeedbag2Fly">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with other instance_destroy()
audio_play_sound(sndPlop, 0, false)
global.seedsInventory += 1

if objPlanter.state == PlantState_Draw {
    scrClearPath()
    objPlanter.state = PlantState_Plant
}
else if objPlanter.state == PlantState_Choose {
    objPlanter.state = PlantState_Plant
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if frozen exit

if placeable {
    draw_set_alpha(0.2)
    draw_set_color(c_white)
    var xx = view_xview+view_wview
    var yy = view_yview+view_hview
    var w = 120
    var h = 60
    draw_rectangle(xx-w, yy-h, xx, yy, false)
    draw_set_color(c_white)
    draw_set_alpha(1)
    if objPlanter.state == PlantState_Plant {
        var spr = sprKeyZPlant
    }
    else {
        var spr = sprKeyZWaterCan
    }
    draw_sprite(spr, global.guiAnimT/20, xx-60, yy-15);
}
if cancellable {
    draw_set_alpha(0.2)
    draw_set_color(c_white)
    var xx = view_xview+view_wview
    var yy = view_yview+view_hview-61
    var w = 120
    var h = 60
    draw_rectangle(xx-w, yy-h, xx, yy, false)
    draw_set_color(c_white)
    draw_set_alpha(1)
    draw_sprite(sprKeyXCancel, global.guiAnimT/20, xx-60, yy-15);
}
if global.tutorialArrowKeys {
    draw_set_alpha(0.2)
    draw_set_color(c_white)
    var xx = view_xview+view_wview
    var yy = view_yview+view_hview
    var w = 120
    var h = 60
    draw_rectangle(xx-w, yy-h, xx, yy, false)
    draw_set_color(c_white)
    draw_set_alpha(1)
    draw_sprite(sprArrowKeys, global.guiAnimT/15, xx-60, yy-15);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw square highlight
if placeable {
    var rectOff = -1
    var arrowOff = -1
    if floor(uiAnimT/20) mod 2 != 0 {
        rectOff = 0
        arrowOff = 0
    }
    
    draw_set_color(make_color_hsv(0, 0, 210))
    draw_rectangle(tileXWorld-rectOff, tileYWorld-rectOff,
        tileXWorld+global.tileSize-1+rectOff, tileYWorld+global.tileSize-1+rectOff, true)
    draw_sprite(sprArrowDown, 0, tileXWorld+global.tileSize/2, tileYWorld+4-arrowOff)
    draw_set_color(c_white)
}
else if not ableToCancel {
    //draw_sprite_ext(sprNoSelectSquare, 0, tileXWorld, tileYWorld, 1, 1, 0, c_white, 1)
}





draw_sprite_ext(sprite_index, image_index, x, y-12, image_xscale, image_yscale, image_angle, image_blend, image_alpha)

if objPlanter.state == PlantState_Plant {
    draw_sprite_ext(sprBulb, 0, x, y-38, 1, 1, 90, c_white, 1)
}

if CanDisplay = 1 draw_sprite(sprWateringCan,abs(numSeeds-4),x,y-53)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
