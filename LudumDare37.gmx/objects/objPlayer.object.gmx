<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerFront</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>walkSpeed = 2
width = 24
height = 24
halfWidth = width/2
halfHeight = height/2

numSeedsPerRound = 4
numSeeds = numSeedsPerRound

tileX = 0
tileY = 0
tileXWorld = 0
tileYWorld = 0
uiAnimT = 0

image_speed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// movement

var xLast = x
var yLast = y

var left = keyboard_check(vk_left)
var right = keyboard_check(vk_right)
var up = keyboard_check(vk_up)
var down = keyboard_check(vk_down)

if left {
    x -= walkSpeed
    sprite_index = sprPlayerLeft
}
else if right {
    x += walkSpeed
    sprite_index = sprPlayerRight
}

if up {
    y -= walkSpeed
    sprite_index = sprPlayerBack
}
else if down {
    y += walkSpeed
    sprite_index = sprPlayerFront
}

// out of bounds push back in
while x - halfWidth &lt; objHouse.bbox_left {
    x += 1
}

while x + halfWidth - 1 &gt; objHouse.bbox_right {
    x -= 1
}

while y - halfHeight &lt; objHouse.bbox_top {
    y += 1
}

while y + halfHeight - 1 &gt; objHouse.bbox_bottom {
    y -= 1
}

if x != xLast or y != yLast {
    // coming out of standstill
    if image_speed == 0 {
        image_index = 1
    }
    image_speed = 1/10
}
else {
    image_speed = 0
    image_index = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// place seeds and stuff

// Calculate the player's tile
tileX = floor((x-objHouse.x) / global.tileSize)
tileY = floor((y-objHouse.y) / global.tileSize)
tileXWorld = objHouse.x + tileX*global.tileSize
tileYWorld = objHouse.y + tileY*global.tileSize

placeable = scrPlanterTileIsNext(tileX, tileY) and numSeeds &gt; 0

if placeable and keyboard_check_pressed(ord('Z')) {
    var s = instance_create(tileXWorld, tileYWorld, objSeed)
    objPlanter.objectGrid[# tileX, tileY] = s
    
    ds_list_add(objPlanter.pathListX, tileX)
    ds_list_add(objPlanter.pathListY, tileY)
    
    numSeeds -= 1
    
    if numSeeds == 0 {
        numSeeds = numSeedsPerRound
        with objPlanter {
            var startX = pathListX[| 0]
            var startY = pathListY[| 0]
            var vineBase = objectGrid[# startX, startY]
            
            for (var i=1; i&lt;ds_list_size(pathListY); i+=1) {
                //var xP = pathListX[| i-2]
                //var yP = pathListX[| i-2]
                var x1 = pathListX[| i-1]
                var y1 = pathListY[| i-1]
                var x2 = pathListX[| i]
                var y2 = pathListY[| i]
                var dx = -(x2-x1)
                var dy = -(y2-y1)
                
                with vineBase.bulbObj {
                    var prevSeg = vineBase.segmentList[| ds_list_size(vineBase.segmentList)-1];
                    x += dx*global.tileSize
                    y += dy*global.tileSize
                    var seg = instance_create(x, y, objVineSegment);
                    ds_list_add(vineBase.segmentList, seg)
                }
            }
            
            // Clear the last path and destroy seeds
            scrClearListExceptForFirst(pathListX)
            scrClearListExceptForFirst(pathListY)
            for (var i=0; i&lt;w; i+=1) {
                for (var j=0; j&lt;h; j+=1) {
                    var obj = objectGrid[# i, j]
                    if instance_exists(obj) and obj.object_index == objSeed {
                        with obj instance_destroy()
                        objectGrid[# i, j] = noone
                    }
                }
            }
        }
    }
}

if keyboard_check_pressed(ord('X')) {
    var vb = instance_create(tileXWorld, tileYWorld, objVineBase)
    objPlanter.objectGrid[# tileX, tileY] = vb
    
    ds_list_add(objPlanter.pathListX, tileX)
    ds_list_add(objPlanter.pathListY, tileY)
}

uiAnimT += 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw square highlight
if placeable {
    var rectOff = 0
    var arrowOff = 0
    if floor(uiAnimT/20) mod 2 != 0 {
        rectOff = 1
        arrowOff = 1
    }
    
    draw_set_color(c_white)
    draw_rectangle(tileXWorld-rectOff, tileYWorld-rectOff,
        tileXWorld+global.tileSize-1+rectOff, tileYWorld+global.tileSize-1+rectOff, true)
    draw_sprite(sprArrowDown, 0, tileXWorld+global.tileSize/2, tileYWorld+4-arrowOff)
}
else {
    draw_sprite_ext(sprNoSelectSquare, 0, tileXWorld, tileYWorld, 1, 1, 0, c_white, 1)
}

// Draw num seeds
draw_set_color(c_white)
draw_set_halign(fa_left)
draw_set_valign(fa_top)
draw_text(x-10, y-38, 'x'+string(numSeeds))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, x, y-4, image_xscale, image_yscale, image_angle, image_blend, image_alpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
