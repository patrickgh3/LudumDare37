<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprEditorP</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
w = 9
h = 9
arrowRotation=0
// grid of objects at each location (objSeed, objVineBase, etc)
objectGrid = ds_grid_create(w, h)
ds_grid_clear(objectGrid, noone)

// list of path positions the player has set
pathListX = ds_list_create()
pathListY = ds_list_create()

pathAnimT = 0
pathAnimYOff = 0

sprite_index = -1

state = PlantState_Destroy
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_grid_destroy(objectGrid)
ds_list_destroy(pathListX)
ds_list_destroy(pathListY)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//pathAnimT += 1
//pathAnimYOff = round(2*sin(pathAnimT/80*pi*2))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if objTillTransition.groupIndex &lt;= 1 {
    if state == PlantState_Plant {
        // Draw potential vine planting positions
        for (var xx=0; xx&lt;w; xx+=1) {
            for (var yy=0; yy&lt;h; yy+=1) {
                if scrTileIsValidPlant(xx, yy) {
                    draw_sprite(sprPlantHintPlaceholder, global.guiAnimT/5, objHouse.x+xx*global.tileSize, objHouse.y+yy*global.tileSize)
                }
            }
        }
    }
}
if state == PlantState_Choose {
    // Draw potential vine choice positions
    with objVineBase {
        for (var xo=-1; xo&lt;=1; xo+=1) {
            for (var yo=-1; yo&lt;=1; yo+=1) {
                if abs(xo) == abs(yo) continue
                var xx = tileX+xo
                var yy = tileY+yo
                
                if xo=1 arrowRotation = 0
                if yo=-1 arrowRotation = 90
                if xo=-1 arrowRotation = 180
                if yo=1 arrowRotation = 270
                
                if scrTileIsValidChoose(xx, yy) {
                    draw_sprite_ext(sprArrow2, 0, objHouse.x+xx*global.tileSize+16, objHouse.y+yy*global.tileSize+16,1,1,arrowRotation,c_white,1)
                }
            }
        }
    }
}
else if state == PlantState_Draw {
    // Draw the positions the player can continue the path at
    if ds_list_size(pathListX) &gt; 0 {
        var lastX = pathListX[| ds_list_size(pathListX)-1]
        var lastY = pathListY[| ds_list_size(pathListY)-1]
        
        for (var xo=-1; xo&lt;=1; xo+=1) {
            for (var yo=-1; yo&lt;=1; yo+=1) {
                if abs(xo) == abs(yo) continue
                
                if xo=1 arrowRotation = 0
                if yo=-1 arrowRotation = 90
                if xo=-1 arrowRotation = 180
                if yo=1 arrowRotation = 270
                
                var xx = lastX+xo
                var yy = lastY+yo
                
                if xx&lt;0 or xx&gt;=w or yy&lt;0 or yy&gt;=h continue
                //scrDrawRectSize(objHouse.x+xx*global.tileSize, objHouse.y+yy*global.tileSize,
                //global.tileSize, global.tileSize, true)
                if scrTileIsValidPath(xx, yy) {
                    draw_sprite_ext(sprArrow2, 0, objHouse.x+xx*global.tileSize+16, objHouse.y+yy*global.tileSize+16,1,1,arrowRotation,c_white,1)
                }
            }
        }
    }
}

// Draw a line along the path
if ds_list_size(pathListX) &gt; 1 {
    var xs = global.tileSize
    var ys = global.tileSize
    var xo = objHouse.x + global.tileSize/2
    var yo = objHouse.y + global.tileSize/2+pathAnimYOff
    
    for (var i=1; i&lt;ds_list_size(pathListX); i+=1) {
        var x1 = pathListX[| i]*xs+xo-1
        var y1 = pathListY[| i]*ys+yo
        var x2 = pathListX[| i-1]*xs+xo-1
        var y2 = pathListY[| i-1]*ys+yo
        
        draw_set_alpha(0.7)
        //draw_set_color(make_color_rgb(157,196,84))
        draw_set_color(make_color_rgb(51,47,38))
        //draw_line_width(lerp(x1,x2,0.4), lerp(y1,y2,0.4), lerp(x1,x2,0.6), lerp(y1,y2,0.6), 6)
        //draw_line_width(lerp(x1,x2,0.8), lerp(y1,y2,0.8), lerp(x1,x2,1), lerp(y1,y2,1), 6)
        //draw_line_width(lerp(x1,x2,0), lerp(y1,y2,0), lerp(x1,x2,0.2), lerp(y1,y2,0.2), 6)
        draw_line_width(x1, y1, x2, y2, 4)
        draw_set_alpha(1)
        draw_set_color(c_white)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
